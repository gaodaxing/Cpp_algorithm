#include <iostream>
#define Max 101
#include<algorithm>
#include<vector>
#include<stdio.h>
using namespace std;
struct h {
    int height;
    int x, y, route;
    h() {}
    h(int n, int i, int j) :height(n), x(i), y(j) {}
    bool operator<(const h &h2) const{ return height<h2.height; }
};

int main(int argc, const char * argv[]) {
    // insert code here...
    int r, c;
    
    while (scanf("%d %d", &r, &c) == 2){
        int m[Max ][Max ], maxroute = 0, x, y, mh[Max][Max];
        h hh[Max*Max];
    for (int i = 0; i<r; i++) {
        for (int j = 0; j<c; j++) {
            cin >> mh[i][j];//height
            h hhh(mh[i][j], i, j);
            hh[i*c + j] = hhh;
            m[i][j] = 1;//maxroute matrix
        }
    }
    //for(int i=0;i<r*c;i++){
        //cout<<hh[i].x<<" "<<hh[i].y<<" "<<hh[i].height<<endl;
    //}
    sort(hh,hh+r*c);
    for (int i = 0; i<r*c; i++) {
        x = hh[i].x;
        y = hh[i].y;
        if ((x>0)&(hh[i].height>mh[x - 1][y])&(m[x][y] - 1<m[x - 1][y])) { m[x][y] = m[x - 1][y] + 1; if (maxroute<m[x][y])maxroute = m[x][y]; }
        if ((x<r-1)&(hh[i].height>mh[x + 1][y])&(m[x][y] - 1<m[x + 1][y])) { m[x][y] = m[x + 1][y] + 1; if (maxroute<m[x][y])maxroute = m[x][y]; }
        if ((y>0)&(hh[i].height>mh[x][y - 1])&(m[x][y] - 1<m[x][y - 1])) { m[x][y] = m[x][y - 1] + 1; if (maxroute<m[x][y])maxroute = m[x][y]; }
        if ((y<c-1)&(hh[i].height>mh[x][y + 1])&(m[x][y] - 1<m[x][y + 1])) { m[x][y] = m[x][y + 1] + 1; if (maxroute<m[x][y])maxroute = m[x][y]; }
        
    }
    cout << maxroute<<endl;
    }
    return 0;
}
